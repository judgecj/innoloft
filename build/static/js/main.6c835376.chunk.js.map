{"version":3,"sources":["add.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showProfile","data","console","log","setState","hoverMoblie","closeModal","editTask","edit","selectCategory","e","selete","target","value","AddTaskSubmit","preventDefault","buttonLoading","loader","shippingFrom","shippingFrom1","shippingTo","shippingTo1","shippmentMode","state","name","shippingName1","movingDate","Date","now","requestOptions","method","headers","Content-Type","Access-Control-Allow-Origin","body","JSON","stringify","fetch","domain","then","res","json","status","tasks","push","following","newTake","AddNew","AddNewClose","_this2","result","catch","error","errorend","noticeMassage","_this3","react_default","a","createElement","class","onClick","className","onSubmit","type","placeholder","ref","input","style","width","onChange","select","key","updateTask","map","task","i","requestId","src","isAssigned","float","createdAt","submitData","defaultValue","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c835376.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/add.30a1cf94.svg\";","import React, { Component } from 'react';\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport Add from './add.svg';\r\n\r\n\r\nimport \"./App.css\";\r\n\r\n\r\n// const client = new ApolloClient({\r\n//   uri: \"https://api.8base.com/cjvp33au9000201ru4hupd7r5\"\r\n// });\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state ={\r\n        tasks:[],\r\n        hoverMoblie:false,\r\n        domain:\"https://krish-app-node.herokuapp.com/api/shipping/v1\",\r\n        data:null,\r\n        edit:false,\r\n        selete:null,\r\n        newTake:false,\r\n        loader:false\r\n        // product:[]\r\n      \r\n    }\r\n\r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n\r\n            const requestOptions = {\r\n                  method: 'GET',\r\n                  headers: { 'Content-Type':'application/json','Access-Control-Allow-Origin': '*' ,\r\n                  },   \r\n              };\r\n\r\n            \r\n            fetch(this.state.domain, requestOptions)\r\n                    .then(res => res.json())\r\n                    .then((result)=>{\r\n                          // console.log(\"public this.slugify\", result.data)\r\n                        this.setState({\r\n                       \r\n                        tasks:result.data\r\n                        })\r\n                      }).catch( (error) => {\r\n                        // console.log(\"errro\", error);\r\n                        this.setState({\r\n                            errorend  : true,\r\n                            noticeMassage : \"Not update\",\r\n                        })   \r\n              });\r\n\r\n    }\r\n  \r\n    showProfile = (data) =>{\r\n     console.log(\"data ------------>\",data)\r\n     this.setState({\r\n      hoverMoblie:true,\r\n      data:data\r\n     })\r\n    }\r\n\r\n    closeModal= () =>{\r\n\r\n      this.setState({\r\n       hoverMoblie:false\r\n      })\r\n    }\r\n\r\n    editTask = (data) =>{\r\n\r\n      this.setState({\r\n        edit:true\r\n      })\r\n    }\r\n\r\n    selectCategory = (e)=>{\r\n     \r\n          this.setState({\r\n          //    loanData:true,\r\n            selete:e.target.value\r\n          })\r\n  \r\n    \r\n   }\r\n\r\n\r\n   AddTaskSubmit=(e)=>{\r\n    e.preventDefault()\r\n    this.setState({\r\n      buttonLoading:true,\r\n      loader:true\r\n    })\r\n   var data = {\r\n    \r\n      shippingFrom:this.shippingFrom1.value,\r\n      shippingTo:this.shippingTo1.value,\r\n      shippmentMode:this.state. selete,\r\n      name:this.shippingName1.value,\r\n      movingDate : Date.now()\r\n      \r\n   }\r\n   console.log(\"data--------------------->\",data)\r\n      const requestOptions = {\r\n          method: 'POST',\r\n          headers: { 'Content-Type':'application/json','Access-Control-Allow-Origin': '*' ,\r\n             },   \r\n             body: JSON.stringify(data),\r\n          };\r\n          return fetch(this.state.domain, requestOptions )\r\n              .then(res => res.json())\r\n              .then(res => {\r\n                console.log(\"paramsfollows/.ress ----------------------->\",res.data)\r\n              if(res.status  === \"success\"){\r\n                const  tasks = this.state.tasks  \r\n                tasks.push(data)\r\n                console.log(\"tasks/.ress ----------------------->\",tasks)\r\n                this.setState({\r\n                  following:false,\r\n                  newTake :false,\r\n                  // tasks,\r\n                  // tasks:updateTask ,\r\n                  loader:false\r\n                })\r\n              }\r\n       })  \r\n   }\r\n\r\n\r\n  \r\n  \r\n\r\n     AddNew = (e) =>{\r\n       this.setState({\r\n         newTake:true\r\n       })\r\n     }\r\n\r\n\r\n     AddNewClose = () =>{\r\n      this.setState({\r\n        newTake:false\r\n      })\r\n     }\r\n\r\n\r\n    \r\n  render() {\r\n    \r\n\r\n        return (\r\n\r\n             <div>\r\n\r\n                  <header>\r\n                      <div>React Task</div>\r\n                  </header>\r\n\r\n                  <div class=\"newTake-take\">\r\n                        {\r\n                             this.state. newTake ?\r\n                               <a class=\"button button4 \" onClick={ this.AddNewClose}  > Close</a>\r\n                               :\r\n                               <a class=\"button button4\" onClick={ this.AddNew}   >New Task</a>  \r\n                             }  \r\n                        \r\n                        {/* <a class=\"button button4\" onClick={ this.AddNewClose}   >New Task</a>   */}\r\n                  </div>\r\n                {\r\n                this.state. newTake ?\r\n                   <div className=\"app-new-form\"> \r\n                     \r\n                         <form onSubmit={this.   AddTaskSubmit}>\r\n                            <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Name\"\r\n                                    \r\n                                    ref={input =>this.shippingName1 = input} \r\n                                    \r\n                                    className=\"question-input\"\r\n                                    name=\"answer\"\r\n                                />\r\n                            <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Add shipping From\"\r\n                                    \r\n                                    ref={input =>this.shippingFrom1 = input} \r\n                                    \r\n                                    className=\"question-input\"\r\n                                    name=\"answer\"\r\n                                />\r\n                                <input\r\n                                  type=\"text\"\r\n                                  placeholder=\"Shipping To\"\r\n                                 \r\n                                  ref={input =>this.shippingTo1 = input} \r\n                                 \r\n                                  className=\"question-input\"\r\n                                  name=\"answer\"\r\n                                />\r\n                                <select class=\"is-focused\" style={{width:\"380px\"}} onChange={this.selectCategory} value={this.state.select}>\r\n                                  <option>       --- Select Plan  ---</option>\r\n                                    <option key={\"LCL\"} value={\"LCL\"}>  LCL</option>\r\n                                        \r\n                                    <option key={\"FCL\"} value={\"FCL\"}> FCL</option>\r\n                                </select>\r\n                                <br/>\r\n                                {\r\n                                  this.state.updateTask \r\n                                }\r\n                                {\r\n                                    this.state.loader ? \r\n                                    <p>Loading .....</p>\r\n                                    :\r\n                                      <button className=\"button button4\">\r\n                                        Submit\r\n                                      </button>\r\n                                  }\r\n                           </form>\r\n                       </div>\r\n                       :\r\n                       <div> \r\n                         <div className=\"app-tasks\"> \r\n                                \r\n                                {\r\n                                      this.state.tasks.map((task, i) => (\r\n                                        \r\n                                        <div className=\"app-tasks\">                    \r\n                                            <div className=\"all-tasks\">\r\n                                            <a  onClick={() => this.showProfile (task)}>\r\n                                              <div className=\"all-tasks-title\">\r\n                                                     <h3>{task.name}</h3>\r\n                                                   <p>{task.requestId}</p>\r\n                                                  </div>\r\n                                                \r\n                                                <div className=\"all-tasks-img\"> \r\n                                           \r\n                                                     <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/7c/User_font_awesome.svg/1200px-User_font_awesome.svg.png\"/>\r\n                                                \r\n                                                </div>\r\n                                                </a>     \r\n                                                <a  onClick={() => this.showProfile (task)}> \r\n                                                <div className=\"all-tasks-body\">\r\n                                                   <br/>\r\n                                                   Moving Date :  { task.movingDate }\r\n                                                   <br/>\r\n                                                   {task.isAssigned === true? \r\n                                                   <p> Assigned  : Yes </p>\r\n                                                   :\r\n                                                   <p> Assigned  : no </p>\r\n                                                   }\r\n                                                 \r\n                                                </div>\r\n                                                </a>\r\n                                            </div>\r\n                                       </div>   \r\n                                            \r\n                                            \r\n                                        \r\n                                    \r\n                                      ))\r\n      \r\n                                } \r\n                        </div>\r\n                       </div>\r\n                  }\r\n\r\n                  \r\n\r\n                       {\r\n                         this.state.data  === null ?\r\n                            <div>\r\n\r\n                            </div>\r\n                          :\r\n                            <div>\r\n                                {\r\n                                 this.state. hoverMoblie ?\r\n                                  <div class=\"profile-loader\">\r\n                                    <div className=\"profile-pre-loader\"> \r\n                                        <a class=\"button is-danger\" onClick={this.closeModal} style={{float:\"right\"}}>\r\n                                          Close\r\n                                         \r\n                                        </a>\r\n                                    <br/>\r\n\r\n                                    <div className=\"App-modal\">\r\n                                      <div className=\"App-modal-title\"> \r\n                                      <small>{this.state.data.createdAt}</small>\r\n                                         <p>{this.state.data.name}</p>\r\n                                       \r\n                                      </div>\r\n                                      {\r\n                                        this.state.edit ?\r\n                                          <div>\r\n                                            <form onSubmit={this.submitData}>\r\n                                              <input\r\n                                                      type=\"text\"\r\n                                                      placeholder=\"Add shipping From\"\r\n                                                      // value={this.state.data.shippingFrom}\r\n                                                      ref={input =>this.shippingFrom = input} \r\n                                                      // onChange={this.state.handleInputChange}\r\n                                                      defaultValue={this.state.data.shippingFrom} \r\n                                                      className=\"question-input\"\r\n                                                      name=\"answer\"\r\n                                                 />\r\n                                                  <input\r\n                                                    type=\"text\"\r\n                                                    placeholder=\"Shipping To\"\r\n                                                    // value={this.state.data.shippingTo}\r\n                                                    ref={input =>this.shippingTo = input} \r\n                                                    // onChange={this.state.handleInputChange}\r\n                                                    defaultValue={this.state.data.shippingTo} \r\n                                                    className=\"question-input\"\r\n                                                    name=\"answer\"\r\n                                                  />\r\n                                                 <select class=\"is-focused\" style={{width:\"380px\"}} onChange={this.selectCategory} value={this.state.select}>\r\n                                                    <option>       --- Select Plan  ---</option>\r\n                                                      <option key={\"LCL\"} value={\"LCL\"}>  LCL</option>\r\n                                                          \r\n                                                      <option key={\"FCL\"} value={\"FCL\"}> FCL</option>\r\n                                                  </select>\r\n                                                  <br/>\r\n                                                  {\r\n                                                    this.state.loader ? \r\n                                                    <p>Loading .....</p>\r\n                                                    :\r\n                                                      <button className=\"button button4\">\r\n                                                        Submit\r\n                                                      </button>\r\n                                                  }\r\n                                                 \r\n                                                </form>  \r\n                                          </div>\r\n                                          :\r\n                                          <div>\r\n                                              <div className=\"App-modal-full\">\r\n                                                  <br/>\r\n                                                    <b> shipping From</b>   :  {this.state.data.shippingFrom}\r\n                                                    <br/>\r\n                                                    <b> shipping To </b>   :  {this.state.data.shippingTo}\r\n                                                    <br/>\r\n                                                    <b>Shippment  Mode</b>  : {this.state.data.shippmentMode}\r\n                                                  </div>\r\n                                                  \r\n\r\n                                          </div>\r\n                                      }\r\n                                           \r\n                                      \r\n                                    </div>\r\n\r\n                                    </div>\r\n                                   </div>\r\n                                   :\r\n                                   <div></div>   \r\n                               }\r\n  \r\n                            </div>\r\n                       }\r\n                      \r\n\r\n                    \r\n             </div>\r\n\r\n\r\n        )\r\n\r\n\r\n  }\r\n\r\n\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}